From c8010426f867b003e6ffffc2a5a7db8e34f6e9e7 Mon Sep 17 00:00:00 2001
From: Mateusz Jablonski <mateusz.jablonski@intel.com>
Date: Thu, 19 Dec 2019 16:24:26 +0100
Subject: [PATCH 1/2] Pass os interface to gmm helper's constructor

don't access global platform to obtain os interface
Related-To: NEO-3007

Change-Id: I166023a2c7a531393d6311bf991f31d03c634ca7
Signed-off-by: Mateusz Jablonski <mateusz.jablonski@intel.com>
---
 core/gmm_helper/gmm_helper.cpp                   |  4 ++--
 core/gmm_helper/gmm_helper.h                     |  5 +++--
 .../execution_environment.cpp                    |  2 +-
 .../client_context/gmm_client_context.cpp        |  2 +-
 .../client_context/gmm_client_context.h          |  2 +-
 .../client_context/gmm_client_context_base.cpp   |  4 +---
 .../client_context/gmm_client_context_base.h     |  7 ++++---
 .../execution_environment_tests.cpp              |  2 +-
 unit_tests/gmm_helper/gmm_interface_tests.cpp    | 16 +++++++---------
 unit_tests/mocks/mock_gmm_client_context.cpp     |  2 +-
 unit_tests/mocks/mock_gmm_client_context.h       |  2 +-
 .../mocks/mock_gmm_client_context_base.cpp       |  2 --
 unit_tests/mocks/mock_gmm_client_context_base.h  |  2 +-
 13 files changed, 24 insertions(+), 28 deletions(-)

diff --git a/core/gmm_helper/gmm_helper.cpp b/core/gmm_helper/gmm_helper.cpp
index ec892b54..564724cb 100644
--- a/core/gmm_helper/gmm_helper.cpp
+++ b/core/gmm_helper/gmm_helper.cpp
@@ -31,9 +31,9 @@ uint32_t GmmHelper::getMOCS(uint32_t type) {
     return static_cast<uint32_t>(mocs.DwordValue);
 }
 
-GmmHelper::GmmHelper(const HardwareInfo *pHwInfo) : hwInfo(pHwInfo) {
+GmmHelper::GmmHelper(OSInterface *osInterface, const HardwareInfo *pHwInfo) : hwInfo(pHwInfo) {
     loadLib();
-    gmmClientContext = GmmHelper::createGmmContextWrapperFunc(const_cast<HardwareInfo *>(pHwInfo), this->initGmmFunc, this->destroyGmmFunc);
+    gmmClientContext = GmmHelper::createGmmContextWrapperFunc(osInterface, const_cast<HardwareInfo *>(pHwInfo), this->initGmmFunc, this->destroyGmmFunc);
     UNRECOVERABLE_IF(!gmmClientContext);
 }
 
diff --git a/core/gmm_helper/gmm_helper.h b/core/gmm_helper/gmm_helper.h
index fcb52cb1..4f7f4fba 100644
--- a/core/gmm_helper/gmm_helper.h
+++ b/core/gmm_helper/gmm_helper.h
@@ -14,12 +14,13 @@
 namespace NEO {
 class GmmClientContext;
 class OsLibrary;
+class OSInterface;
 struct HardwareInfo;
 
 class GmmHelper {
   public:
     GmmHelper() = delete;
-    GmmHelper(const HardwareInfo *hwInfo);
+    GmmHelper(OSInterface *osInterface, const HardwareInfo *hwInfo);
     MOCKABLE_VIRTUAL ~GmmHelper();
 
     const HardwareInfo *getHardwareInfo();
@@ -39,7 +40,7 @@ class GmmHelper {
 
     GmmClientContext *getClientContext() const;
 
-    static std::unique_ptr<GmmClientContext> (*createGmmContextWrapperFunc)(HardwareInfo *, decltype(&InitializeGmm), decltype(&GmmDestroy));
+    static std::unique_ptr<GmmClientContext> (*createGmmContextWrapperFunc)(OSInterface *, HardwareInfo *, decltype(&InitializeGmm), decltype(&GmmDestroy));
 
   protected:
     void loadLib();
diff --git a/runtime/execution_environment/execution_environment.cpp b/runtime/execution_environment/execution_environment.cpp
index c5dff6b7..db4f1839 100644
--- a/runtime/execution_environment/execution_environment.cpp
+++ b/runtime/execution_environment/execution_environment.cpp
@@ -33,7 +33,7 @@ ExecutionEnvironment::~ExecutionEnvironment() {
 
 void ExecutionEnvironment::initGmm() {
     if (!gmmHelper) {
-        gmmHelper.reset(new GmmHelper(hwInfo.get()));
+        gmmHelper.reset(new GmmHelper(osInterface.get(), hwInfo.get()));
     }
 }
 void ExecutionEnvironment::setHwInfo(const HardwareInfo *hwInfo) {
diff --git a/runtime/gmm_helper/client_context/gmm_client_context.cpp b/runtime/gmm_helper/client_context/gmm_client_context.cpp
index 532d2440..226aa4e4 100644
--- a/runtime/gmm_helper/client_context/gmm_client_context.cpp
+++ b/runtime/gmm_helper/client_context/gmm_client_context.cpp
@@ -8,5 +8,5 @@
 #include "gmm_client_context.h"
 
 namespace NEO {
-GmmClientContext::GmmClientContext(HardwareInfo *hwInfo, decltype(&InitializeGmm) initFunc, decltype(&GmmDestroy) destroyFunc) : GmmClientContextBase(hwInfo, initFunc, destroyFunc){};
+GmmClientContext::GmmClientContext(OSInterface *osInterface, HardwareInfo *hwInfo, decltype(&InitializeGmm) initFunc, decltype(&GmmDestroy) destroyFunc) : GmmClientContextBase(osInterface, hwInfo, initFunc, destroyFunc){};
 } // namespace NEO
diff --git a/runtime/gmm_helper/client_context/gmm_client_context.h b/runtime/gmm_helper/client_context/gmm_client_context.h
index 3a1041d2..c0cc3a49 100644
--- a/runtime/gmm_helper/client_context/gmm_client_context.h
+++ b/runtime/gmm_helper/client_context/gmm_client_context.h
@@ -11,6 +11,6 @@
 namespace NEO {
 class GmmClientContext : public GmmClientContextBase {
   public:
-    GmmClientContext(HardwareInfo *hwInfo, decltype(&InitializeGmm) initFunc, decltype(&GmmDestroy) destroyFunc);
+    GmmClientContext(OSInterface *osInterface, HardwareInfo *hwInfo, decltype(&InitializeGmm) initFunc, decltype(&GmmDestroy) destroyFunc);
 };
 } // namespace NEO
diff --git a/runtime/gmm_helper/client_context/gmm_client_context_base.cpp b/runtime/gmm_helper/client_context/gmm_client_context_base.cpp
index 701a80bd..0f829969 100644
--- a/runtime/gmm_helper/client_context/gmm_client_context_base.cpp
+++ b/runtime/gmm_helper/client_context/gmm_client_context_base.cpp
@@ -13,10 +13,9 @@
 #include "core/sku_info/operations/sku_info_transfer.h"
 #include "runtime/execution_environment/execution_environment.h"
 #include "runtime/os_interface/os_interface.h"
-#include "runtime/platform/platform.h"
 
 namespace NEO {
-GmmClientContextBase::GmmClientContextBase(HardwareInfo *hwInfo, decltype(&InitializeGmm) initFunc, decltype(&GmmDestroy) destroyFunc) : destroyFunc(destroyFunc) {
+GmmClientContextBase::GmmClientContextBase(OSInterface *osInterface, HardwareInfo *hwInfo, decltype(&InitializeGmm) initFunc, decltype(&GmmDestroy) destroyFunc) : destroyFunc(destroyFunc) {
     _SKU_FEATURE_TABLE gmmFtrTable = {};
     _WA_TABLE gmmWaTable = {};
     SkuInfoTransfer::transferFtrTableForGmm(&gmmFtrTable, &hwInfo->featureTable);
@@ -31,7 +30,6 @@ GmmClientContextBase::GmmClientContextBase(HardwareInfo *hwInfo, decltype(&Initi
     inArgs.pWaTable = &gmmWaTable;
     inArgs.Platform = hwInfo->platform;
 
-    auto osInterface = platform()->peekExecutionEnvironment()->osInterface.get();
     if (osInterface) {
         osInterface->setGmmInputArgs(&inArgs);
     }
diff --git a/runtime/gmm_helper/client_context/gmm_client_context_base.h b/runtime/gmm_helper/client_context/gmm_client_context_base.h
index 8d4719bd..b2b736c5 100644
--- a/runtime/gmm_helper/client_context/gmm_client_context_base.h
+++ b/runtime/gmm_helper/client_context/gmm_client_context_base.h
@@ -12,6 +12,7 @@
 
 namespace NEO {
 class GmmClientContext;
+class OSInterface;
 struct HardwareInfo;
 
 class GmmClientContextBase {
@@ -24,8 +25,8 @@ class GmmClientContextBase {
     MOCKABLE_VIRTUAL void destroyResInfoObject(GMM_RESOURCE_INFO *pResInfo);
     GMM_CLIENT_CONTEXT *getHandle() const;
     template <typename T>
-    static std::unique_ptr<GmmClientContext> create(HardwareInfo *hwInfo, decltype(&InitializeGmm) initFunc, decltype(&GmmDestroy) destroyFunc) {
-        return std::make_unique<T>(hwInfo, initFunc, destroyFunc);
+    static std::unique_ptr<GmmClientContext> create(OSInterface *osInterface, HardwareInfo *hwInfo, decltype(&InitializeGmm) initFunc, decltype(&GmmDestroy) destroyFunc) {
+        return std::make_unique<T>(osInterface, hwInfo, initFunc, destroyFunc);
     }
 
     MOCKABLE_VIRTUAL uint8_t getSurfaceStateCompressionFormat(GMM_RESOURCE_FORMAT format);
@@ -33,7 +34,7 @@ class GmmClientContextBase {
 
   protected:
     GMM_CLIENT_CONTEXT *clientContext;
-    GmmClientContextBase(HardwareInfo *hwInfo, decltype(&InitializeGmm) initFunc, decltype(&GmmDestroy) destroyFunc);
+    GmmClientContextBase(OSInterface *osInterface, HardwareInfo *hwInfo, decltype(&InitializeGmm) initFunc, decltype(&GmmDestroy) destroyFunc);
     decltype(&GmmDestroy) destroyFunc;
 };
 } // namespace NEO
diff --git a/unit_tests/execution_environment/execution_environment_tests.cpp b/unit_tests/execution_environment/execution_environment_tests.cpp
index 116a20a0..bd386114 100644
--- a/unit_tests/execution_environment/execution_environment_tests.cpp
+++ b/unit_tests/execution_environment/execution_environment_tests.cpp
@@ -158,7 +158,7 @@ TEST(ExecutionEnvironment, givenExecutionEnvironmentWithVariousMembersWhenItIsDe
         using ExecutionEnvironment::gmmHelper;
     };
     struct GmmHelperMock : public DestructorCounted<GmmHelper, 7> {
-        GmmHelperMock(uint32_t &destructorId, const HardwareInfo *hwInfo) : DestructorCounted(destructorId, hwInfo) {}
+        GmmHelperMock(uint32_t &destructorId, const HardwareInfo *hwInfo) : DestructorCounted(destructorId, nullptr, hwInfo) {}
     };
     struct OsInterfaceMock : public DestructorCounted<OSInterface, 6> {
         OsInterfaceMock(uint32_t &destructorId) : DestructorCounted(destructorId) {}
diff --git a/unit_tests/gmm_helper/gmm_interface_tests.cpp b/unit_tests/gmm_helper/gmm_interface_tests.cpp
index d415489f..f7169587 100644
--- a/unit_tests/gmm_helper/gmm_interface_tests.cpp
+++ b/unit_tests/gmm_helper/gmm_interface_tests.cpp
@@ -71,31 +71,31 @@ struct GmmInterfaceTest : public ::testing::Test {
 
 TEST_F(GmmInterfaceTest, givenValidGmmLibWhenCreateGmmHelperThenEverythingWorksFine) {
     std::unique_ptr<GmmHelper> gmmHelper;
-    EXPECT_NO_THROW(gmmHelper.reset(new GmmHelper(*platformDevices)));
+    EXPECT_NO_THROW(gmmHelper.reset(new GmmHelper(nullptr, *platformDevices)));
 }
 
 TEST_F(GmmInterfaceTest, givenInvalidGmmLibNameWhenCreateGmmHelperThenThrowException) {
     std::unique_ptr<GmmHelper> gmmHelper;
     gmmDllNameBackup = "invalidName";
-    EXPECT_THROW(gmmHelper.reset(new GmmHelper(*platformDevices)), std::exception);
+    EXPECT_THROW(gmmHelper.reset(new GmmHelper(nullptr, *platformDevices)), std::exception);
 }
 
 TEST_F(GmmInterfaceTest, givenGmmLibWhenOpenGmmFunctionFailsThenThrowException) {
     std::unique_ptr<GmmHelper> gmmHelper;
     VariableBackup<GMM_STATUS> openGmmReturnValueBackup(&openGmmReturnValue, GMM_ERROR);
-    EXPECT_THROW(gmmHelper.reset(new GmmHelper(*platformDevices)), std::exception);
+    EXPECT_THROW(gmmHelper.reset(new GmmHelper(nullptr, *platformDevices)), std::exception);
 }
 
 TEST_F(GmmInterfaceTest, givenInvalidGmmInitFunctionNameWhenCreateGmmHelperThenThrowException) {
     std::unique_ptr<GmmHelper> gmmHelper;
     gmmInitNameBackup = "invalidName";
-    EXPECT_THROW(gmmHelper.reset(new GmmHelper(*platformDevices)), std::exception);
+    EXPECT_THROW(gmmHelper.reset(new GmmHelper(nullptr, *platformDevices)), std::exception);
 }
 
 TEST_F(GmmInterfaceTest, givenInvalidGmmDestroyFunctionNameWhenCreateGmmHelperThenThrowException) {
     std::unique_ptr<GmmHelper> gmmHelper;
     gmmDestroyNameBackup = "invalidName";
-    EXPECT_THROW(gmmHelper.reset(new GmmHelper(*platformDevices)), std::exception);
+    EXPECT_THROW(gmmHelper.reset(new GmmHelper(nullptr, *platformDevices)), std::exception);
 }
 
 TEST_F(GmmInterfaceTest, givenValidGmmFunctionsWhenCreateGmmHelperWithInitializedOsInterfaceThenProperParametersArePassed) {
@@ -114,7 +114,7 @@ TEST_F(GmmInterfaceTest, givenValidGmmFunctionsWhenCreateGmmHelperWithInitialize
     SkuInfoTransfer::transferFtrTableForGmm(&expectedFtrTable, &hwInfo->featureTable);
     SkuInfoTransfer::transferWaTableForGmm(&expectedWaTable, &hwInfo->workaroundTable);
 
-    gmmHelper.reset(new GmmHelper(hwInfo));
+    gmmHelper.reset(new GmmHelper(executionEnvironment->osInterface.get(), hwInfo));
     EXPECT_EQ(0, memcmp(&hwInfo->platform, &passedInputArgs.Platform, sizeof(PLATFORM)));
     EXPECT_EQ(&hwInfo->gtSystemInfo, passedInputArgs.pGtSysInfo);
     EXPECT_EQ(0, memcmp(&expectedFtrTable, &passedFtrTable, sizeof(SKU_FEATURE_TABLE)));
@@ -124,8 +124,6 @@ TEST_F(GmmInterfaceTest, givenValidGmmFunctionsWhenCreateGmmHelperWithInitialize
 
 TEST_F(GmmInterfaceTest, givenValidGmmFunctionsWhenCreateGmmHelperWithoutOsInterfaceThenInitializationDoesntCrashAndProperParametersArePassed) {
     std::unique_ptr<GmmHelper> gmmHelper;
-    auto executionEnvironment = platform()->peekExecutionEnvironment();
-    executionEnvironment->osInterface.reset();
     VariableBackup<decltype(passedInputArgs)> passedInputArgsBackup(&passedInputArgs);
     VariableBackup<decltype(passedFtrTable)> passedFtrTableBackup(&passedFtrTable);
     VariableBackup<decltype(passedWaTable)> passedWaTableBackup(&passedWaTable);
@@ -137,7 +135,7 @@ TEST_F(GmmInterfaceTest, givenValidGmmFunctionsWhenCreateGmmHelperWithoutOsInter
     SkuInfoTransfer::transferFtrTableForGmm(&expectedFtrTable, &hwInfo->featureTable);
     SkuInfoTransfer::transferWaTableForGmm(&expectedWaTable, &hwInfo->workaroundTable);
 
-    gmmHelper.reset(new GmmHelper(hwInfo));
+    gmmHelper.reset(new GmmHelper(nullptr, hwInfo));
     EXPECT_EQ(0, memcmp(&hwInfo->platform, &passedInputArgs.Platform, sizeof(PLATFORM)));
     EXPECT_EQ(&hwInfo->gtSystemInfo, passedInputArgs.pGtSysInfo);
     EXPECT_EQ(0, memcmp(&expectedFtrTable, &passedFtrTable, sizeof(SKU_FEATURE_TABLE)));
diff --git a/unit_tests/mocks/mock_gmm_client_context.cpp b/unit_tests/mocks/mock_gmm_client_context.cpp
index 1babca9a..2b7d6a7c 100644
--- a/unit_tests/mocks/mock_gmm_client_context.cpp
+++ b/unit_tests/mocks/mock_gmm_client_context.cpp
@@ -8,6 +8,6 @@
 #include "mock_gmm_client_context.h"
 
 namespace NEO {
-MockGmmClientContext::MockGmmClientContext(HardwareInfo *hwInfo, decltype(&InitializeGmm) initFunc, decltype(&GmmDestroy) destroyFunc) : MockGmmClientContextBase(hwInfo, initFunc, destroyFunc) {
+MockGmmClientContext::MockGmmClientContext(OSInterface *osInterface, HardwareInfo *hwInfo, decltype(&InitializeGmm) initFunc, decltype(&GmmDestroy) destroyFunc) : MockGmmClientContextBase(osInterface, hwInfo, initFunc, destroyFunc) {
 }
 } // namespace NEO
diff --git a/unit_tests/mocks/mock_gmm_client_context.h b/unit_tests/mocks/mock_gmm_client_context.h
index 35f20650..3b587fe8 100644
--- a/unit_tests/mocks/mock_gmm_client_context.h
+++ b/unit_tests/mocks/mock_gmm_client_context.h
@@ -11,6 +11,6 @@
 namespace NEO {
 class MockGmmClientContext : public MockGmmClientContextBase {
   public:
-    MockGmmClientContext(HardwareInfo *hwInfo, decltype(&InitializeGmm) initFunc, decltype(&GmmDestroy) destroyFunc);
+    MockGmmClientContext(OSInterface *osInterface, HardwareInfo *hwInfo, decltype(&InitializeGmm) initFunc, decltype(&GmmDestroy) destroyFunc);
 };
 } // namespace NEO
diff --git a/unit_tests/mocks/mock_gmm_client_context_base.cpp b/unit_tests/mocks/mock_gmm_client_context_base.cpp
index c91baa0f..77fdb369 100644
--- a/unit_tests/mocks/mock_gmm_client_context_base.cpp
+++ b/unit_tests/mocks/mock_gmm_client_context_base.cpp
@@ -8,8 +8,6 @@
 #include "unit_tests/mocks/mock_gmm_client_context.h"
 
 namespace NEO {
-MockGmmClientContextBase::MockGmmClientContextBase(HardwareInfo *hwInfo, decltype(&InitializeGmm) initFunc, decltype(&GmmDestroy) destroyFunc) : GmmClientContext(hwInfo, initFunc, destroyFunc) {
-}
 
 MEMORY_OBJECT_CONTROL_STATE MockGmmClientContextBase::cachePolicyGetMemoryObject(GMM_RESOURCE_INFO *pResInfo, GMM_RESOURCE_USAGE_TYPE usage) {
     MEMORY_OBJECT_CONTROL_STATE retVal = {};
diff --git a/unit_tests/mocks/mock_gmm_client_context_base.h b/unit_tests/mocks/mock_gmm_client_context_base.h
index 0430b4cd..191946b6 100644
--- a/unit_tests/mocks/mock_gmm_client_context_base.h
+++ b/unit_tests/mocks/mock_gmm_client_context_base.h
@@ -24,6 +24,6 @@ class MockGmmClientContextBase : public GmmClientContext {
     uint32_t getMediaSurfaceStateCompressionFormatCalled = 0u;
 
   protected:
-    MockGmmClientContextBase(HardwareInfo *hwInfo, decltype(&InitializeGmm) initFunc, decltype(&GmmDestroy) destroyFuncs);
+    using GmmClientContext::GmmClientContext;
 };
 } // namespace NEO
-- 
2.21.1

